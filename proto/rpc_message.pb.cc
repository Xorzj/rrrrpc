// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc_message.proto

#include "rpc_message.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace rpc {
PROTOBUF_CONSTEXPR RpcRequest::RpcRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.service_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.method_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.request_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.request_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RpcRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RpcRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RpcRequestDefaultTypeInternal() {}
  union {
    RpcRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RpcRequestDefaultTypeInternal _RpcRequest_default_instance_;
PROTOBUF_CONSTEXPR RpcResponse::RpcResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.request_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.error_msg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.response_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.error_code_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RpcResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RpcResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RpcResponseDefaultTypeInternal() {}
  union {
    RpcResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RpcResponseDefaultTypeInternal _RpcResponse_default_instance_;
PROTOBUF_CONSTEXPR ServiceRegisterRequest::ServiceRegisterRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.service_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.host_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.port_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServiceRegisterRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServiceRegisterRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServiceRegisterRequestDefaultTypeInternal() {}
  union {
    ServiceRegisterRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServiceRegisterRequestDefaultTypeInternal _ServiceRegisterRequest_default_instance_;
PROTOBUF_CONSTEXPR ServiceRegisterResponse::ServiceRegisterResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServiceRegisterResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServiceRegisterResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServiceRegisterResponseDefaultTypeInternal() {}
  union {
    ServiceRegisterResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServiceRegisterResponseDefaultTypeInternal _ServiceRegisterResponse_default_instance_;
PROTOBUF_CONSTEXPR ServiceDiscoveryRequest::ServiceDiscoveryRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.service_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServiceDiscoveryRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServiceDiscoveryRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServiceDiscoveryRequestDefaultTypeInternal() {}
  union {
    ServiceDiscoveryRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServiceDiscoveryRequestDefaultTypeInternal _ServiceDiscoveryRequest_default_instance_;
PROTOBUF_CONSTEXPR ServiceInfo::ServiceInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.host_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.last_heartbeat_)*/int64_t{0}
  , /*decltype(_impl_.port_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServiceInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServiceInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServiceInfoDefaultTypeInternal() {}
  union {
    ServiceInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServiceInfoDefaultTypeInternal _ServiceInfo_default_instance_;
PROTOBUF_CONSTEXPR ServiceDiscoveryResponse::ServiceDiscoveryResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.services_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServiceDiscoveryResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServiceDiscoveryResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServiceDiscoveryResponseDefaultTypeInternal() {}
  union {
    ServiceDiscoveryResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServiceDiscoveryResponseDefaultTypeInternal _ServiceDiscoveryResponse_default_instance_;
PROTOBUF_CONSTEXPR HeartbeatRequest::HeartbeatRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.service_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.host_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.port_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HeartbeatRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeartbeatRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeartbeatRequestDefaultTypeInternal() {}
  union {
    HeartbeatRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeartbeatRequestDefaultTypeInternal _HeartbeatRequest_default_instance_;
PROTOBUF_CONSTEXPR HeartbeatResponse::HeartbeatResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HeartbeatResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeartbeatResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeartbeatResponseDefaultTypeInternal() {}
  union {
    HeartbeatResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeartbeatResponseDefaultTypeInternal _HeartbeatResponse_default_instance_;
}  // namespace rpc
static ::_pb::Metadata file_level_metadata_rpc_5fmessage_2eproto[9];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_rpc_5fmessage_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_rpc_5fmessage_2eproto = nullptr;

const uint32_t TableStruct_rpc_5fmessage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rpc::RpcRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rpc::RpcRequest, _impl_.service_name_),
  PROTOBUF_FIELD_OFFSET(::rpc::RpcRequest, _impl_.method_name_),
  PROTOBUF_FIELD_OFFSET(::rpc::RpcRequest, _impl_.request_data_),
  PROTOBUF_FIELD_OFFSET(::rpc::RpcRequest, _impl_.request_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rpc::RpcResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rpc::RpcResponse, _impl_.request_id_),
  PROTOBUF_FIELD_OFFSET(::rpc::RpcResponse, _impl_.error_code_),
  PROTOBUF_FIELD_OFFSET(::rpc::RpcResponse, _impl_.error_msg_),
  PROTOBUF_FIELD_OFFSET(::rpc::RpcResponse, _impl_.response_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rpc::ServiceRegisterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rpc::ServiceRegisterRequest, _impl_.service_name_),
  PROTOBUF_FIELD_OFFSET(::rpc::ServiceRegisterRequest, _impl_.host_),
  PROTOBUF_FIELD_OFFSET(::rpc::ServiceRegisterRequest, _impl_.port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rpc::ServiceRegisterResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rpc::ServiceRegisterResponse, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::rpc::ServiceRegisterResponse, _impl_.message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rpc::ServiceDiscoveryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rpc::ServiceDiscoveryRequest, _impl_.service_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rpc::ServiceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rpc::ServiceInfo, _impl_.host_),
  PROTOBUF_FIELD_OFFSET(::rpc::ServiceInfo, _impl_.port_),
  PROTOBUF_FIELD_OFFSET(::rpc::ServiceInfo, _impl_.last_heartbeat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rpc::ServiceDiscoveryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rpc::ServiceDiscoveryResponse, _impl_.services_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rpc::HeartbeatRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rpc::HeartbeatRequest, _impl_.service_name_),
  PROTOBUF_FIELD_OFFSET(::rpc::HeartbeatRequest, _impl_.host_),
  PROTOBUF_FIELD_OFFSET(::rpc::HeartbeatRequest, _impl_.port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rpc::HeartbeatResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rpc::HeartbeatResponse, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::rpc::HeartbeatResponse, _impl_.message_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::rpc::RpcRequest)},
  { 10, -1, -1, sizeof(::rpc::RpcResponse)},
  { 20, -1, -1, sizeof(::rpc::ServiceRegisterRequest)},
  { 29, -1, -1, sizeof(::rpc::ServiceRegisterResponse)},
  { 37, -1, -1, sizeof(::rpc::ServiceDiscoveryRequest)},
  { 44, -1, -1, sizeof(::rpc::ServiceInfo)},
  { 53, -1, -1, sizeof(::rpc::ServiceDiscoveryResponse)},
  { 60, -1, -1, sizeof(::rpc::HeartbeatRequest)},
  { 69, -1, -1, sizeof(::rpc::HeartbeatResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::rpc::_RpcRequest_default_instance_._instance,
  &::rpc::_RpcResponse_default_instance_._instance,
  &::rpc::_ServiceRegisterRequest_default_instance_._instance,
  &::rpc::_ServiceRegisterResponse_default_instance_._instance,
  &::rpc::_ServiceDiscoveryRequest_default_instance_._instance,
  &::rpc::_ServiceInfo_default_instance_._instance,
  &::rpc::_ServiceDiscoveryResponse_default_instance_._instance,
  &::rpc::_HeartbeatRequest_default_instance_._instance,
  &::rpc::_HeartbeatResponse_default_instance_._instance,
};

const char descriptor_table_protodef_rpc_5fmessage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021rpc_message.proto\022\003rpc\"a\n\nRpcRequest\022\024"
  "\n\014service_name\030\001 \001(\t\022\023\n\013method_name\030\002 \001("
  "\t\022\024\n\014request_data\030\003 \001(\014\022\022\n\nrequest_id\030\004 "
  "\001(\t\"_\n\013RpcResponse\022\022\n\nrequest_id\030\001 \001(\t\022\022"
  "\n\nerror_code\030\002 \001(\005\022\021\n\terror_msg\030\003 \001(\t\022\025\n"
  "\rresponse_data\030\004 \001(\014\"J\n\026ServiceRegisterR"
  "equest\022\024\n\014service_name\030\001 \001(\t\022\014\n\004host\030\002 \001"
  "(\t\022\014\n\004port\030\003 \001(\005\";\n\027ServiceRegisterRespo"
  "nse\022\017\n\007success\030\001 \001(\010\022\017\n\007message\030\002 \001(\t\"/\n"
  "\027ServiceDiscoveryRequest\022\024\n\014service_name"
  "\030\001 \001(\t\"A\n\013ServiceInfo\022\014\n\004host\030\001 \001(\t\022\014\n\004p"
  "ort\030\002 \001(\005\022\026\n\016last_heartbeat\030\003 \001(\003\">\n\030Ser"
  "viceDiscoveryResponse\022\"\n\010services\030\001 \003(\0132"
  "\020.rpc.ServiceInfo\"D\n\020HeartbeatRequest\022\024\n"
  "\014service_name\030\001 \001(\t\022\014\n\004host\030\002 \001(\t\022\014\n\004por"
  "t\030\003 \001(\005\"5\n\021HeartbeatResponse\022\017\n\007success\030"
  "\001 \001(\010\022\017\n\007message\030\002 \001(\tb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_rpc_5fmessage_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_rpc_5fmessage_2eproto = {
    false, false, 670, descriptor_table_protodef_rpc_5fmessage_2eproto,
    "rpc_message.proto",
    &descriptor_table_rpc_5fmessage_2eproto_once, nullptr, 0, 9,
    schemas, file_default_instances, TableStruct_rpc_5fmessage_2eproto::offsets,
    file_level_metadata_rpc_5fmessage_2eproto, file_level_enum_descriptors_rpc_5fmessage_2eproto,
    file_level_service_descriptors_rpc_5fmessage_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_rpc_5fmessage_2eproto_getter() {
  return &descriptor_table_rpc_5fmessage_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_rpc_5fmessage_2eproto(&descriptor_table_rpc_5fmessage_2eproto);
namespace rpc {

// ===================================================================

class RpcRequest::_Internal {
 public:
};

RpcRequest::RpcRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rpc.RpcRequest)
}
RpcRequest::RpcRequest(const RpcRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RpcRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.service_name_){}
    , decltype(_impl_.method_name_){}
    , decltype(_impl_.request_data_){}
    , decltype(_impl_.request_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.service_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.service_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_service_name().empty()) {
    _this->_impl_.service_name_.Set(from._internal_service_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.method_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.method_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_method_name().empty()) {
    _this->_impl_.method_name_.Set(from._internal_method_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.request_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_request_data().empty()) {
    _this->_impl_.request_data_.Set(from._internal_request_data(), 
      _this->GetArenaForAllocation());
  }
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_request_id().empty()) {
    _this->_impl_.request_id_.Set(from._internal_request_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:rpc.RpcRequest)
}

inline void RpcRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.service_name_){}
    , decltype(_impl_.method_name_){}
    , decltype(_impl_.request_data_){}
    , decltype(_impl_.request_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.service_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.service_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.method_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.method_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.request_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RpcRequest::~RpcRequest() {
  // @@protoc_insertion_point(destructor:rpc.RpcRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RpcRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.service_name_.Destroy();
  _impl_.method_name_.Destroy();
  _impl_.request_data_.Destroy();
  _impl_.request_id_.Destroy();
}

void RpcRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RpcRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:rpc.RpcRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.service_name_.ClearToEmpty();
  _impl_.method_name_.ClearToEmpty();
  _impl_.request_data_.ClearToEmpty();
  _impl_.request_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RpcRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string service_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_service_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rpc.RpcRequest.service_name"));
        } else
          goto handle_unusual;
        continue;
      // string method_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_method_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rpc.RpcRequest.method_name"));
        } else
          goto handle_unusual;
        continue;
      // bytes request_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_request_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string request_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_request_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rpc.RpcRequest.request_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RpcRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc.RpcRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string service_name = 1;
  if (!this->_internal_service_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service_name().data(), static_cast<int>(this->_internal_service_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rpc.RpcRequest.service_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_service_name(), target);
  }

  // string method_name = 2;
  if (!this->_internal_method_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_method_name().data(), static_cast<int>(this->_internal_method_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rpc.RpcRequest.method_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_method_name(), target);
  }

  // bytes request_data = 3;
  if (!this->_internal_request_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_request_data(), target);
  }

  // string request_id = 4;
  if (!this->_internal_request_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rpc.RpcRequest.request_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_request_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc.RpcRequest)
  return target;
}

size_t RpcRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rpc.RpcRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string service_name = 1;
  if (!this->_internal_service_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service_name());
  }

  // string method_name = 2;
  if (!this->_internal_method_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_method_name());
  }

  // bytes request_data = 3;
  if (!this->_internal_request_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_request_data());
  }

  // string request_id = 4;
  if (!this->_internal_request_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RpcRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RpcRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RpcRequest::GetClassData() const { return &_class_data_; }


void RpcRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RpcRequest*>(&to_msg);
  auto& from = static_cast<const RpcRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rpc.RpcRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_service_name().empty()) {
    _this->_internal_set_service_name(from._internal_service_name());
  }
  if (!from._internal_method_name().empty()) {
    _this->_internal_set_method_name(from._internal_method_name());
  }
  if (!from._internal_request_data().empty()) {
    _this->_internal_set_request_data(from._internal_request_data());
  }
  if (!from._internal_request_id().empty()) {
    _this->_internal_set_request_id(from._internal_request_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RpcRequest::CopyFrom(const RpcRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpc.RpcRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcRequest::IsInitialized() const {
  return true;
}

void RpcRequest::InternalSwap(RpcRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.service_name_, lhs_arena,
      &other->_impl_.service_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.method_name_, lhs_arena,
      &other->_impl_.method_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.request_data_, lhs_arena,
      &other->_impl_.request_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.request_id_, lhs_arena,
      &other->_impl_.request_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RpcRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rpc_5fmessage_2eproto_getter, &descriptor_table_rpc_5fmessage_2eproto_once,
      file_level_metadata_rpc_5fmessage_2eproto[0]);
}

// ===================================================================

class RpcResponse::_Internal {
 public:
};

RpcResponse::RpcResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rpc.RpcResponse)
}
RpcResponse::RpcResponse(const RpcResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RpcResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.request_id_){}
    , decltype(_impl_.error_msg_){}
    , decltype(_impl_.response_data_){}
    , decltype(_impl_.error_code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_request_id().empty()) {
    _this->_impl_.request_id_.Set(from._internal_request_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.error_msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_msg().empty()) {
    _this->_impl_.error_msg_.Set(from._internal_error_msg(), 
      _this->GetArenaForAllocation());
  }
  _impl_.response_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.response_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_response_data().empty()) {
    _this->_impl_.response_data_.Set(from._internal_response_data(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.error_code_ = from._impl_.error_code_;
  // @@protoc_insertion_point(copy_constructor:rpc.RpcResponse)
}

inline void RpcResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.request_id_){}
    , decltype(_impl_.error_msg_){}
    , decltype(_impl_.response_data_){}
    , decltype(_impl_.error_code_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.error_msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.response_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.response_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RpcResponse::~RpcResponse() {
  // @@protoc_insertion_point(destructor:rpc.RpcResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RpcResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.request_id_.Destroy();
  _impl_.error_msg_.Destroy();
  _impl_.response_data_.Destroy();
}

void RpcResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RpcResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:rpc.RpcResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.request_id_.ClearToEmpty();
  _impl_.error_msg_.ClearToEmpty();
  _impl_.response_data_.ClearToEmpty();
  _impl_.error_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RpcResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rpc.RpcResponse.request_id"));
        } else
          goto handle_unusual;
        continue;
      // int32 error_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.error_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string error_msg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_error_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rpc.RpcResponse.error_msg"));
        } else
          goto handle_unusual;
        continue;
      // bytes response_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_response_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RpcResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc.RpcResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rpc.RpcResponse.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // int32 error_code = 2;
  if (this->_internal_error_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_error_code(), target);
  }

  // string error_msg = 3;
  if (!this->_internal_error_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_msg().data(), static_cast<int>(this->_internal_error_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rpc.RpcResponse.error_msg");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_error_msg(), target);
  }

  // bytes response_data = 4;
  if (!this->_internal_response_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_response_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc.RpcResponse)
  return target;
}

size_t RpcResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rpc.RpcResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // string error_msg = 3;
  if (!this->_internal_error_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_msg());
  }

  // bytes response_data = 4;
  if (!this->_internal_response_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_response_data());
  }

  // int32 error_code = 2;
  if (this->_internal_error_code() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_error_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RpcResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RpcResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RpcResponse::GetClassData() const { return &_class_data_; }


void RpcResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RpcResponse*>(&to_msg);
  auto& from = static_cast<const RpcResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rpc.RpcResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_request_id().empty()) {
    _this->_internal_set_request_id(from._internal_request_id());
  }
  if (!from._internal_error_msg().empty()) {
    _this->_internal_set_error_msg(from._internal_error_msg());
  }
  if (!from._internal_response_data().empty()) {
    _this->_internal_set_response_data(from._internal_response_data());
  }
  if (from._internal_error_code() != 0) {
    _this->_internal_set_error_code(from._internal_error_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RpcResponse::CopyFrom(const RpcResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpc.RpcResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcResponse::IsInitialized() const {
  return true;
}

void RpcResponse::InternalSwap(RpcResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.request_id_, lhs_arena,
      &other->_impl_.request_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_msg_, lhs_arena,
      &other->_impl_.error_msg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.response_data_, lhs_arena,
      &other->_impl_.response_data_, rhs_arena
  );
  swap(_impl_.error_code_, other->_impl_.error_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RpcResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rpc_5fmessage_2eproto_getter, &descriptor_table_rpc_5fmessage_2eproto_once,
      file_level_metadata_rpc_5fmessage_2eproto[1]);
}

// ===================================================================

class ServiceRegisterRequest::_Internal {
 public:
};

ServiceRegisterRequest::ServiceRegisterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rpc.ServiceRegisterRequest)
}
ServiceRegisterRequest::ServiceRegisterRequest(const ServiceRegisterRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServiceRegisterRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.service_name_){}
    , decltype(_impl_.host_){}
    , decltype(_impl_.port_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.service_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.service_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_service_name().empty()) {
    _this->_impl_.service_name_.Set(from._internal_service_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.host_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.host_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_host().empty()) {
    _this->_impl_.host_.Set(from._internal_host(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.port_ = from._impl_.port_;
  // @@protoc_insertion_point(copy_constructor:rpc.ServiceRegisterRequest)
}

inline void ServiceRegisterRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.service_name_){}
    , decltype(_impl_.host_){}
    , decltype(_impl_.port_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.service_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.service_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.host_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.host_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ServiceRegisterRequest::~ServiceRegisterRequest() {
  // @@protoc_insertion_point(destructor:rpc.ServiceRegisterRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServiceRegisterRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.service_name_.Destroy();
  _impl_.host_.Destroy();
}

void ServiceRegisterRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServiceRegisterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:rpc.ServiceRegisterRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.service_name_.ClearToEmpty();
  _impl_.host_.ClearToEmpty();
  _impl_.port_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServiceRegisterRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string service_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_service_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rpc.ServiceRegisterRequest.service_name"));
        } else
          goto handle_unusual;
        continue;
      // string host = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_host();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rpc.ServiceRegisterRequest.host"));
        } else
          goto handle_unusual;
        continue;
      // int32 port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServiceRegisterRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc.ServiceRegisterRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string service_name = 1;
  if (!this->_internal_service_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service_name().data(), static_cast<int>(this->_internal_service_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rpc.ServiceRegisterRequest.service_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_service_name(), target);
  }

  // string host = 2;
  if (!this->_internal_host().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_host().data(), static_cast<int>(this->_internal_host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rpc.ServiceRegisterRequest.host");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_host(), target);
  }

  // int32 port = 3;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc.ServiceRegisterRequest)
  return target;
}

size_t ServiceRegisterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rpc.ServiceRegisterRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string service_name = 1;
  if (!this->_internal_service_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service_name());
  }

  // string host = 2;
  if (!this->_internal_host().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host());
  }

  // int32 port = 3;
  if (this->_internal_port() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_port());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServiceRegisterRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServiceRegisterRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServiceRegisterRequest::GetClassData() const { return &_class_data_; }


void ServiceRegisterRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServiceRegisterRequest*>(&to_msg);
  auto& from = static_cast<const ServiceRegisterRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rpc.ServiceRegisterRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_service_name().empty()) {
    _this->_internal_set_service_name(from._internal_service_name());
  }
  if (!from._internal_host().empty()) {
    _this->_internal_set_host(from._internal_host());
  }
  if (from._internal_port() != 0) {
    _this->_internal_set_port(from._internal_port());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServiceRegisterRequest::CopyFrom(const ServiceRegisterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpc.ServiceRegisterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceRegisterRequest::IsInitialized() const {
  return true;
}

void ServiceRegisterRequest::InternalSwap(ServiceRegisterRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.service_name_, lhs_arena,
      &other->_impl_.service_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.host_, lhs_arena,
      &other->_impl_.host_, rhs_arena
  );
  swap(_impl_.port_, other->_impl_.port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServiceRegisterRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rpc_5fmessage_2eproto_getter, &descriptor_table_rpc_5fmessage_2eproto_once,
      file_level_metadata_rpc_5fmessage_2eproto[2]);
}

// ===================================================================

class ServiceRegisterResponse::_Internal {
 public:
};

ServiceRegisterResponse::ServiceRegisterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rpc.ServiceRegisterResponse)
}
ServiceRegisterResponse::ServiceRegisterResponse(const ServiceRegisterResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServiceRegisterResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:rpc.ServiceRegisterResponse)
}

inline void ServiceRegisterResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ServiceRegisterResponse::~ServiceRegisterResponse() {
  // @@protoc_insertion_point(destructor:rpc.ServiceRegisterResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServiceRegisterResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void ServiceRegisterResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServiceRegisterResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:rpc.ServiceRegisterResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServiceRegisterResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rpc.ServiceRegisterResponse.message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServiceRegisterResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc.ServiceRegisterResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rpc.ServiceRegisterResponse.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc.ServiceRegisterResponse)
  return target;
}

size_t ServiceRegisterResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rpc.ServiceRegisterResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServiceRegisterResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServiceRegisterResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServiceRegisterResponse::GetClassData() const { return &_class_data_; }


void ServiceRegisterResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServiceRegisterResponse*>(&to_msg);
  auto& from = static_cast<const ServiceRegisterResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rpc.ServiceRegisterResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServiceRegisterResponse::CopyFrom(const ServiceRegisterResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpc.ServiceRegisterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceRegisterResponse::IsInitialized() const {
  return true;
}

void ServiceRegisterResponse::InternalSwap(ServiceRegisterResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServiceRegisterResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rpc_5fmessage_2eproto_getter, &descriptor_table_rpc_5fmessage_2eproto_once,
      file_level_metadata_rpc_5fmessage_2eproto[3]);
}

// ===================================================================

class ServiceDiscoveryRequest::_Internal {
 public:
};

ServiceDiscoveryRequest::ServiceDiscoveryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rpc.ServiceDiscoveryRequest)
}
ServiceDiscoveryRequest::ServiceDiscoveryRequest(const ServiceDiscoveryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServiceDiscoveryRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.service_name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.service_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.service_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_service_name().empty()) {
    _this->_impl_.service_name_.Set(from._internal_service_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:rpc.ServiceDiscoveryRequest)
}

inline void ServiceDiscoveryRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.service_name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.service_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.service_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ServiceDiscoveryRequest::~ServiceDiscoveryRequest() {
  // @@protoc_insertion_point(destructor:rpc.ServiceDiscoveryRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServiceDiscoveryRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.service_name_.Destroy();
}

void ServiceDiscoveryRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServiceDiscoveryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:rpc.ServiceDiscoveryRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.service_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServiceDiscoveryRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string service_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_service_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rpc.ServiceDiscoveryRequest.service_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServiceDiscoveryRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc.ServiceDiscoveryRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string service_name = 1;
  if (!this->_internal_service_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service_name().data(), static_cast<int>(this->_internal_service_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rpc.ServiceDiscoveryRequest.service_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_service_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc.ServiceDiscoveryRequest)
  return target;
}

size_t ServiceDiscoveryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rpc.ServiceDiscoveryRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string service_name = 1;
  if (!this->_internal_service_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServiceDiscoveryRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServiceDiscoveryRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServiceDiscoveryRequest::GetClassData() const { return &_class_data_; }


void ServiceDiscoveryRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServiceDiscoveryRequest*>(&to_msg);
  auto& from = static_cast<const ServiceDiscoveryRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rpc.ServiceDiscoveryRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_service_name().empty()) {
    _this->_internal_set_service_name(from._internal_service_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServiceDiscoveryRequest::CopyFrom(const ServiceDiscoveryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpc.ServiceDiscoveryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceDiscoveryRequest::IsInitialized() const {
  return true;
}

void ServiceDiscoveryRequest::InternalSwap(ServiceDiscoveryRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.service_name_, lhs_arena,
      &other->_impl_.service_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ServiceDiscoveryRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rpc_5fmessage_2eproto_getter, &descriptor_table_rpc_5fmessage_2eproto_once,
      file_level_metadata_rpc_5fmessage_2eproto[4]);
}

// ===================================================================

class ServiceInfo::_Internal {
 public:
};

ServiceInfo::ServiceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rpc.ServiceInfo)
}
ServiceInfo::ServiceInfo(const ServiceInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServiceInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.host_){}
    , decltype(_impl_.last_heartbeat_){}
    , decltype(_impl_.port_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.host_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.host_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_host().empty()) {
    _this->_impl_.host_.Set(from._internal_host(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.last_heartbeat_, &from._impl_.last_heartbeat_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.port_) -
    reinterpret_cast<char*>(&_impl_.last_heartbeat_)) + sizeof(_impl_.port_));
  // @@protoc_insertion_point(copy_constructor:rpc.ServiceInfo)
}

inline void ServiceInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.host_){}
    , decltype(_impl_.last_heartbeat_){int64_t{0}}
    , decltype(_impl_.port_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.host_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.host_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ServiceInfo::~ServiceInfo() {
  // @@protoc_insertion_point(destructor:rpc.ServiceInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServiceInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.host_.Destroy();
}

void ServiceInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServiceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:rpc.ServiceInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.host_.ClearToEmpty();
  ::memset(&_impl_.last_heartbeat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.port_) -
      reinterpret_cast<char*>(&_impl_.last_heartbeat_)) + sizeof(_impl_.port_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServiceInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string host = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_host();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rpc.ServiceInfo.host"));
        } else
          goto handle_unusual;
        continue;
      // int32 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 last_heartbeat = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.last_heartbeat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServiceInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc.ServiceInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string host = 1;
  if (!this->_internal_host().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_host().data(), static_cast<int>(this->_internal_host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rpc.ServiceInfo.host");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_host(), target);
  }

  // int32 port = 2;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_port(), target);
  }

  // int64 last_heartbeat = 3;
  if (this->_internal_last_heartbeat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_last_heartbeat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc.ServiceInfo)
  return target;
}

size_t ServiceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rpc.ServiceInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string host = 1;
  if (!this->_internal_host().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host());
  }

  // int64 last_heartbeat = 3;
  if (this->_internal_last_heartbeat() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_last_heartbeat());
  }

  // int32 port = 2;
  if (this->_internal_port() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_port());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServiceInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServiceInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServiceInfo::GetClassData() const { return &_class_data_; }


void ServiceInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServiceInfo*>(&to_msg);
  auto& from = static_cast<const ServiceInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rpc.ServiceInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_host().empty()) {
    _this->_internal_set_host(from._internal_host());
  }
  if (from._internal_last_heartbeat() != 0) {
    _this->_internal_set_last_heartbeat(from._internal_last_heartbeat());
  }
  if (from._internal_port() != 0) {
    _this->_internal_set_port(from._internal_port());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServiceInfo::CopyFrom(const ServiceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpc.ServiceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceInfo::IsInitialized() const {
  return true;
}

void ServiceInfo::InternalSwap(ServiceInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.host_, lhs_arena,
      &other->_impl_.host_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServiceInfo, _impl_.port_)
      + sizeof(ServiceInfo::_impl_.port_)
      - PROTOBUF_FIELD_OFFSET(ServiceInfo, _impl_.last_heartbeat_)>(
          reinterpret_cast<char*>(&_impl_.last_heartbeat_),
          reinterpret_cast<char*>(&other->_impl_.last_heartbeat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServiceInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rpc_5fmessage_2eproto_getter, &descriptor_table_rpc_5fmessage_2eproto_once,
      file_level_metadata_rpc_5fmessage_2eproto[5]);
}

// ===================================================================

class ServiceDiscoveryResponse::_Internal {
 public:
};

ServiceDiscoveryResponse::ServiceDiscoveryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rpc.ServiceDiscoveryResponse)
}
ServiceDiscoveryResponse::ServiceDiscoveryResponse(const ServiceDiscoveryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServiceDiscoveryResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.services_){from._impl_.services_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:rpc.ServiceDiscoveryResponse)
}

inline void ServiceDiscoveryResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.services_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ServiceDiscoveryResponse::~ServiceDiscoveryResponse() {
  // @@protoc_insertion_point(destructor:rpc.ServiceDiscoveryResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServiceDiscoveryResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.services_.~RepeatedPtrField();
}

void ServiceDiscoveryResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServiceDiscoveryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:rpc.ServiceDiscoveryResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.services_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServiceDiscoveryResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .rpc.ServiceInfo services = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_services(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServiceDiscoveryResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc.ServiceDiscoveryResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .rpc.ServiceInfo services = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_services_size()); i < n; i++) {
    const auto& repfield = this->_internal_services(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc.ServiceDiscoveryResponse)
  return target;
}

size_t ServiceDiscoveryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rpc.ServiceDiscoveryResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .rpc.ServiceInfo services = 1;
  total_size += 1UL * this->_internal_services_size();
  for (const auto& msg : this->_impl_.services_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServiceDiscoveryResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServiceDiscoveryResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServiceDiscoveryResponse::GetClassData() const { return &_class_data_; }


void ServiceDiscoveryResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServiceDiscoveryResponse*>(&to_msg);
  auto& from = static_cast<const ServiceDiscoveryResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rpc.ServiceDiscoveryResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.services_.MergeFrom(from._impl_.services_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServiceDiscoveryResponse::CopyFrom(const ServiceDiscoveryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpc.ServiceDiscoveryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceDiscoveryResponse::IsInitialized() const {
  return true;
}

void ServiceDiscoveryResponse::InternalSwap(ServiceDiscoveryResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.services_.InternalSwap(&other->_impl_.services_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServiceDiscoveryResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rpc_5fmessage_2eproto_getter, &descriptor_table_rpc_5fmessage_2eproto_once,
      file_level_metadata_rpc_5fmessage_2eproto[6]);
}

// ===================================================================

class HeartbeatRequest::_Internal {
 public:
};

HeartbeatRequest::HeartbeatRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rpc.HeartbeatRequest)
}
HeartbeatRequest::HeartbeatRequest(const HeartbeatRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HeartbeatRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.service_name_){}
    , decltype(_impl_.host_){}
    , decltype(_impl_.port_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.service_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.service_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_service_name().empty()) {
    _this->_impl_.service_name_.Set(from._internal_service_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.host_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.host_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_host().empty()) {
    _this->_impl_.host_.Set(from._internal_host(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.port_ = from._impl_.port_;
  // @@protoc_insertion_point(copy_constructor:rpc.HeartbeatRequest)
}

inline void HeartbeatRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.service_name_){}
    , decltype(_impl_.host_){}
    , decltype(_impl_.port_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.service_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.service_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.host_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.host_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HeartbeatRequest::~HeartbeatRequest() {
  // @@protoc_insertion_point(destructor:rpc.HeartbeatRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HeartbeatRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.service_name_.Destroy();
  _impl_.host_.Destroy();
}

void HeartbeatRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HeartbeatRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:rpc.HeartbeatRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.service_name_.ClearToEmpty();
  _impl_.host_.ClearToEmpty();
  _impl_.port_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeartbeatRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string service_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_service_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rpc.HeartbeatRequest.service_name"));
        } else
          goto handle_unusual;
        continue;
      // string host = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_host();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rpc.HeartbeatRequest.host"));
        } else
          goto handle_unusual;
        continue;
      // int32 port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HeartbeatRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc.HeartbeatRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string service_name = 1;
  if (!this->_internal_service_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service_name().data(), static_cast<int>(this->_internal_service_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rpc.HeartbeatRequest.service_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_service_name(), target);
  }

  // string host = 2;
  if (!this->_internal_host().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_host().data(), static_cast<int>(this->_internal_host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rpc.HeartbeatRequest.host");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_host(), target);
  }

  // int32 port = 3;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc.HeartbeatRequest)
  return target;
}

size_t HeartbeatRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rpc.HeartbeatRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string service_name = 1;
  if (!this->_internal_service_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service_name());
  }

  // string host = 2;
  if (!this->_internal_host().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host());
  }

  // int32 port = 3;
  if (this->_internal_port() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_port());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HeartbeatRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HeartbeatRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HeartbeatRequest::GetClassData() const { return &_class_data_; }


void HeartbeatRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HeartbeatRequest*>(&to_msg);
  auto& from = static_cast<const HeartbeatRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rpc.HeartbeatRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_service_name().empty()) {
    _this->_internal_set_service_name(from._internal_service_name());
  }
  if (!from._internal_host().empty()) {
    _this->_internal_set_host(from._internal_host());
  }
  if (from._internal_port() != 0) {
    _this->_internal_set_port(from._internal_port());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HeartbeatRequest::CopyFrom(const HeartbeatRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpc.HeartbeatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartbeatRequest::IsInitialized() const {
  return true;
}

void HeartbeatRequest::InternalSwap(HeartbeatRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.service_name_, lhs_arena,
      &other->_impl_.service_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.host_, lhs_arena,
      &other->_impl_.host_, rhs_arena
  );
  swap(_impl_.port_, other->_impl_.port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HeartbeatRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rpc_5fmessage_2eproto_getter, &descriptor_table_rpc_5fmessage_2eproto_once,
      file_level_metadata_rpc_5fmessage_2eproto[7]);
}

// ===================================================================

class HeartbeatResponse::_Internal {
 public:
};

HeartbeatResponse::HeartbeatResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rpc.HeartbeatResponse)
}
HeartbeatResponse::HeartbeatResponse(const HeartbeatResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HeartbeatResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:rpc.HeartbeatResponse)
}

inline void HeartbeatResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HeartbeatResponse::~HeartbeatResponse() {
  // @@protoc_insertion_point(destructor:rpc.HeartbeatResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HeartbeatResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void HeartbeatResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HeartbeatResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:rpc.HeartbeatResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeartbeatResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rpc.HeartbeatResponse.message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HeartbeatResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc.HeartbeatResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rpc.HeartbeatResponse.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc.HeartbeatResponse)
  return target;
}

size_t HeartbeatResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rpc.HeartbeatResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HeartbeatResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HeartbeatResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HeartbeatResponse::GetClassData() const { return &_class_data_; }


void HeartbeatResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HeartbeatResponse*>(&to_msg);
  auto& from = static_cast<const HeartbeatResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rpc.HeartbeatResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HeartbeatResponse::CopyFrom(const HeartbeatResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpc.HeartbeatResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartbeatResponse::IsInitialized() const {
  return true;
}

void HeartbeatResponse::InternalSwap(HeartbeatResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HeartbeatResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rpc_5fmessage_2eproto_getter, &descriptor_table_rpc_5fmessage_2eproto_once,
      file_level_metadata_rpc_5fmessage_2eproto[8]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace rpc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::rpc::RpcRequest*
Arena::CreateMaybeMessage< ::rpc::RpcRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rpc::RpcRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::rpc::RpcResponse*
Arena::CreateMaybeMessage< ::rpc::RpcResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rpc::RpcResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::rpc::ServiceRegisterRequest*
Arena::CreateMaybeMessage< ::rpc::ServiceRegisterRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rpc::ServiceRegisterRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::rpc::ServiceRegisterResponse*
Arena::CreateMaybeMessage< ::rpc::ServiceRegisterResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rpc::ServiceRegisterResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::rpc::ServiceDiscoveryRequest*
Arena::CreateMaybeMessage< ::rpc::ServiceDiscoveryRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rpc::ServiceDiscoveryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::rpc::ServiceInfo*
Arena::CreateMaybeMessage< ::rpc::ServiceInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rpc::ServiceInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::rpc::ServiceDiscoveryResponse*
Arena::CreateMaybeMessage< ::rpc::ServiceDiscoveryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rpc::ServiceDiscoveryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::rpc::HeartbeatRequest*
Arena::CreateMaybeMessage< ::rpc::HeartbeatRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rpc::HeartbeatRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::rpc::HeartbeatResponse*
Arena::CreateMaybeMessage< ::rpc::HeartbeatResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rpc::HeartbeatResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
